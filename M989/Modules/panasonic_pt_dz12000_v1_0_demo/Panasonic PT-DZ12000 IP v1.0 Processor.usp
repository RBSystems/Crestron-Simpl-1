/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: GM
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Panasonic PT-DZ12000 IP v1.0 Processor"
// #HINT
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN
	To be used with the Panasonic PT-DZ12000 IP v1.0.umc module only.  Not to be used as a stand-alone module.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Lamp1_Requested, Lamp2_Requested, Lamp3_Requested, Lamp4_Requested, Lamp_Status_Requested;
DIGITAL_INPUT Brightness_Requested, Contrast_Requested;
DIGITAL_INPUT Brightness_Adjust, Contrast_Adjust;
ANALOG_INPUT Brightness_In, Contrast_In; 
STRING_INPUT From_Device[255];
// BUFFER_INPUT

// DIGITAL_OUTPUT 
ANALOG_OUTPUT Lamp1_Hours, Lamp2_Hours, Lamp3_Hours, Lamp4_Hours, Lamp_Status;
ANALOG_OUTPUT Brightness_Out, Contrast_Out;
STRING_OUTPUT To_Device;

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER  iBusyFlag;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING sTemp$[254];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

CHANGE Brightness_In
{
	if(Brightness_Adjust = 1)
	{
		makestring(To_Device, "00VBR:%s\x0D", itoa(Brightness_In + 1));
	}
}

CHANGE Contrast_In
{
	if(Contrast_Adjust = 1)
	{
		makestring(To_Device, "00VCN:%s\x0D", itoa(Contrast_In + 1));
	}
}

CHANGE From_Device
{
	// Lamp hours are of the form "######\x0D"
	if(iBusyFlag = 0 && Lamp1_Requested = 1) // if not busy processing and it is a valid lamp request
	{
		iBusyFlag = 1; // set busy to avoid re-entry into parser
		while(find("\x0D", From_Device) > 0 )  // look for the delimeter during a Lamp Request
    	{
    		sTemp$ = remove("\x0D", From_Device); // build the string
		   	if (find ("ER401", sTemp$) = 0 && Len(sTemp$) = 7) // Skip errors and unwanted strings 
		    {     
				Lamp1_Hours = ATOI(left(sTemp$,6)); // set lamp hours
			}
		}
		iBusyFlag = 0; // clear busy 
	}
		
	if(iBusyFlag = 0 && Lamp2_Requested = 1) // if not busy processing and it is a valid lamp request
	{
		iBusyFlag = 1; // set busy to avoid re-entry into parser
		while(find("\x0D", From_Device) > 0 )  // look for the ETX during a Lamp Request
    	{
    		sTemp$ = remove("\x0D", From_Device); // build the string
		   	if (find ("ER401", sTemp$) = 0 && Len(sTemp$) = 7) // Skip errors and unwanted strings 
		    {     
				Lamp2_Hours = ATOI(left(sTemp$,6)); // set lamp hours
			}
		}
		iBusyFlag = 0; // clear busy 
	}
		
	if(iBusyFlag = 0 && Lamp3_Requested = 1) // if not busy processing and it is a valid lamp request
	{
		iBusyFlag = 1; // set busy to avoid re-entry into parser
		while(find("\x0D", From_Device) > 0 )  // look for the ETX during a Lamp Request
    	{
    		sTemp$ = remove("\x0D", From_Device); // build the string
		   	if (find ("ER401", sTemp$) = 0 && Len(sTemp$) = 7) // Skip errors and unwanted strings 
		    {     
				Lamp3_Hours = ATOI(left(sTemp$,6)); // set lamp hours
			}
		}
		iBusyFlag = 0; // clear busy 
	}
		
	if(iBusyFlag = 0 && Lamp4_Requested = 1) // if not busy processing and it is a valid lamp request
	{
		iBusyFlag = 1; // set busy to avoid re-entry into parser
		while(find("\x0D", From_Device) > 0 )  // look for the ETX during a Lamp Request
    	{
    		sTemp$ = remove("\x0D", From_Device); // build the string
		   	if (find ("ER401", sTemp$) = 0 && Len(sTemp$) = 7) // Skip errors and unwanted strings 
		    {     
				Lamp4_Hours = ATOI(left(sTemp$,6)); // set lamp hours
			}
		}
		iBusyFlag = 0; // clear busy 
	}
		
    // Lamp Status strings are of the form "###\x0D"
	if(iBusyFlag = 0 && Lamp_Status_Requested = 1) // if not busy processing and it is a valid lamp request
	{
		iBusyFlag = 1; // set busy to avoid re-entry into parser
		while(find("\x0D", From_Device) > 0 )  // look for the ETX during a Lamp Request
    	{
    		sTemp$ = remove("\x0D", From_Device); // build the string
		   	if (find ("ER401", sTemp$) = 0 && Len(sTemp$) = 4) // Skip errors and unwanted strings 
		    {	
				Lamp_Status = ATOI(left(sTemp$,3)); // lamp status
			}
		}
		iBusyFlag = 0; // clear busy 
	}
		
    // Brightness strings are of the form "#####\x0D" - Range 001 to 063 (-31 to 31)
    if(iBusyFlag = 0 && Brightness_Requested = 1) // if not busy processing and it is a valid brightness request
    {
		iBusyFlag = 1; // set busy to avoid re-entry into parser
   		while(find("\x0D", From_Device) > 0 )  // look for the ETX during a Brightness Request
    	{
    		sTemp$ = remove("\x0D", From_Device); // build the string
			if (find ("ER401", sTemp$) = 0 && Len(sTemp$) = 6) // Skip errors and unwanted strings 
		    {     
				Brightness_Out = ATOI(left(sTemp$,5)) - 1; // set brightness
			}
		}
		iBusyFlag = 0; // clear busy
	}
 
    // Contrast strings are of the form "#####\x0D" - Range 001 to 063 (-31 to 31)
    if(iBusyFlag = 0 && Contrast_Requested = 1) // if not busy processing and it is a valid Contrast request
    {
		iBusyFlag = 1; // set busy to avoid re-entry into parser
   		while(find("\x0D", From_Device) > 0 )  // look for the ETX during a Contrast Request
    	{
    		sTemp$ = remove("\x0D", From_Device); // build the string
			if (find ("ER401", sTemp$) = 0 && Len(sTemp$) = 6) // Skip errors and unwanted strings 
		    {     
				Contrast_Out = ATOI(left(sTemp$,5)) - 1; // set Contrast
			}
		}
		iBusyFlag = 0; // clear busy
	}
} 

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    //	TODO:  Add code here
    //	Initialize declared global and local variables/arrays as needed.

    //	WaitForInitializationComplete();
    //	If you are reading any Input or Output variables, uncomment
    //	the WaitForInitializationComplete statement above and read
    //	them afterwards.  Input/Output variables will not have
    //	their correct values set until after the logic processor
    //	runs and propagates the values to them.
    iBusyFlag = 0;
    Lamp1_Hours = 0;
    Lamp2_Hours = 0;
    Lamp3_Hours = 0;
    Lamp4_Hours = 0;
	Lamp_Status = 0;
    Brightness_Out = 0;
	Contrast_Out = 0; 
	ClearBuffer(sTemp$);
    ClearBuffer(From_Device);
}
