/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
#SYMBOL_NAME "Panasonic PT-DZ12000 IP v1.0 Queue"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
#PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#HELP_BEGIN
	To be used with the Panasonic PT-DZ12000 IP v1.0.umc module only.  Not to be used as a stand-alone module.
#HELP_END

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT SendCommand, Connect_F; 
// ANALOG_INPUT 
STRING_INPUT StringToSend[250], From_Device[50]; 
// BUFFER_INPUT 

DIGITAL_OUTPUT Connect, QueNotEmpty; 
ANALOG_OUTPUT QueueValue; 
STRING_OUTPUT StringSend; 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER	iQueue, a, iSemaphore, iCount, iConnecting;
STRING	sStringQueue[100][50];

FUNCTION ClearQueueFunc()
{
	iQueue = 0;
	QueueValue = iQueue;
	QueNotEmpty = 0;

	for(a = 1 to 100)
    {
		clearbuffer(sStringQueue[a]);
	}
}

FUNCTION IPConnect()
{
	iConnecting = 1;
	Connect = 1;
	wait(100, dIPConnect)
	{
		Connect = 0;
		iCount = iCount + 1;
		if(iCount < 5)
		{
			delay(10);
			call IPConnect();
		}
		else
		{
			call ClearQueueFunc();
		}
	}
	iConnecting = 0;
}

FUNCTION SendNextFunction()
{
	cancelwait(dIPConnect);

	if(sStringQueue[1] <> "")
	{
		StringSend = sStringQueue[1];
	}

	for (a = 1 to 99)	
	{
		sStringQueue[a] = sStringQueue[a + 1];
	}

	sStringQueue[100] = "";
	if(iQueue > 0)
		iQueue = iQueue - 1;
	QueueValue = iQueue;
	if(QueueValue <> 0)
		QueNotEmpty = 1;
	else
		QueNotEmpty = 0;
}


PUSH SendCommand
{
	iCount = 0;
	call IPConnect();
}

RELEASE Connect_F
{
	if(iConnecting = 0)
	{
		Connect = 0;
		if(iQueue <> 0)
		{
			call IPConnect();
		}	
	}
}

CHANGE StringToSend	
{
	if(iSemaphore = 0)
	{
		iSemaphore = 1;
		iQueue = iQueue + 1;		//	increase queue index by 1
		if(iQueue > 100)			//	if queue index is above 100
		{
			call ClearQueueFunc();	//	clear out queue and start index from 1
			iQueue = iQueue + 1;
        }
		QueueValue = iQueue;
		if(QueueValue <> 0)
			QueNotEmpty = 1;
		else
			QueNotEmpty = 0;
		sStringQueue[iQueue] = StringToSend;	//	add incoming command to assigned index	
    	iSemaphore = 0;
	}
}

CHANGE From_Device
{
	if(From_Device = "NTCONTROL 0\x0D")
	{
		call SendNextFunction();
	}
}
		

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	iSemaphore = 0;
	iQueue = 0;
	QueueValue = 0;
	Connect = 0;
	QueNotEmpty = 0;
}


