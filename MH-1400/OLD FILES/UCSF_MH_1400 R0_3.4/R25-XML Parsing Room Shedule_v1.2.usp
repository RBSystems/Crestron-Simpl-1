/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:UCSF	
System Name:XML Parsing with Bret
System Number:1
Programmer:Bret Wittmann	
Comments: Use Philip Hutchison's xml page for R25 Room Schedule 
HEK Modify to include new string output CaptureTimes.
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT delay1 10
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT sendScheduleQuery;
DIGITAL_INPUT login_R25;
DIGITAL_INPUT Logout_R25; 
// ANALOG_INPUT 
STRING_INPUT roomScheduleQuery[512];
STRING_INPUT hostname[100];
STRING_INPUT port[4];
STRING_INPUT time_o_day[18];
// BUFFER_INPUT 

DIGITAL_OUTPUT connected_fb;
// ANALOG_OUTPUT 	
STRING_OUTPUT currentTitle;
STRING_OUTPUT currentStartTime;
STRING_OUTPUT currentEndTime;
STRING_OUTPUT currentDescription;
STRING_OUTPUT currentDisplay;
STRING_OUTPUT currentCaptureTimes;
//STRING_OUTPUT title[6],startTime[6],endTime[6],description[6],display[6],captureTimes[12];

//STRING_OUTPUT  r25Rx;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT tcpTxRx[4096];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/

STRUCTURE classTimes
{
string title[100];
string startTime[16];
string endTime[16];
string description[150];
string display[100];
string captureTimes[150];
};

classTimes currentClass[8];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER i;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
function tryLogin()
{

	SIGNED_INTEGER status;
    
	status = SocketConnectClient (tcpTxRx, hostname, atoi(port), 1); //client, host, port, enable reconnect

    if (status < 0)
	{
		Print("Error connecting socket to address on port");
		GenerateUserError("Error connecting socket to address on port");
		return;
	}
	else
	{
		connected_fb = 1;
	}
	        
}

function processXML(String xmlEvent)
{

	integer titleS,titleE;
	integer startS,startE;
	integer endS,endE;
	integer displayS,displayE;
  	integer descriptionS,descriptionE;
	integer capturetimesS,capturetimesE;
	print("i is %d\n", i);
	titleS=	find("<title>",xmlEvent);
	titleE=	find("</title>",xmlEvent);
	startS=	find("<start>",xmlEvent);
	startE=	find("</start>",xmlEvent);
	endS=  	find("<end>",xmlEvent);
	endE=	find("</end>",xmlEvent);
	displayS= find("<display>",xmlEvent);
	displayE= find("</display>",xmlEvent);
	descriptionS=find("<description>",xmlEvent);
	descriptionE=find("</description>",xmlEvent);
	capturetimesS=find("<capturetimes>",xmlEvent);
	capturetimesE=find("</capturetimes>",xmlEvent);
	currentClass[i].title=mid(xmlEvent,(titleS + 7),titleE - (titleS + 7));
	//title[i+1] = currentClass[i].title;
	currentClass[i].startTime=mid(xmlEvent,(startS + 7),startE - (startS + 7));
	//startTime[i+1] = currentClass[i].startTime;
	currentClass[i].endTime=mid(xmlEvent,(endS + 5),endE - (endS + 5));
	//endTime[i+1] = currentClass[i].endTime;
	currentClass[i].description=mid(xmlEvent,(descriptionS + 13),descriptionE - (descriptionS + 13));
	//description[i+1] = currentClass[i].description;
	currentClass[i].display = mid(xmlEvent,(displayS + 9),displayE - (displayS + 9));
	//display[i+1] = currentClass[i].display;
	if (capturetimesS > 0)
	{
	currentClass[i].capturetimes = mid(xmlEvent,(capturetimesS + 14),capturetimesE - (capturetimesS + 14));
	}
	else
	{
	currentClass[i].capturetimes = ""; 
	}
	print("capturetimeS is %d\n",capturetimesS);
	//capturetimes[i+1] = currentClass[i].capturetimes;
	processlogic();
	delay(delay1);
	i = i + 1;

}

/*function clearbuffs()
{
integer a;
	for (a=0 to a=8)
	{
		clearbuffer(currentClass[a].title);
		clearbuffer(currentClass[a].startTime);
		clearbuffer(currentClass[a].endTime);
		clearbuffer(currentClass[a].description);
		clearbuffer(currentClass[a].display);
		clearbuffer(currentClass[a].capturetimes);
	}
}
*/



/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH login_R25
{    
	SocketDisconnectClient(tcpTxRx);
	
	if(hostname="")
	{
		GenerateUserError("The hostname serial input is blank");
		return;
	}
		
	tryLogin();
}


PUSH Logout_R25
{
	SIGNED_INTEGER status;
	status = Socketdisconnectclient(tcpTxRx);
	if (status =0)
	{
		connected_fb = 0;
	}
}

PUSH sendScheduleQuery
{
	i=0;
	//call clearbuffs();	
	SocketSend(tcpTxRx,roomScheduleQuery);
	//test_tx=sendString;
}
/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/

/*
EVENT
{
    // TODO:  Add code here
}
*/


SOCKETCONNECT tcpTxRx
{
   SIGNED_LONG_INTEGER PortNumber;
    SIGNED_INTEGER status;

    SIGNED_INTEGER LocalStatus;

    STRING RemoteIPAddress[30];

    STRING RequestedAddress[512];
    STRING sendString[2024];    

    LocalStatus = SocketGetAddressAsRequested(tcpTxRx, RequestedAddress);

    if (LocalStatus < 0)

        Print("Error getting remote ip address. %d\n", LocalStatus);

    Print("OnConnect: Connect call to %s successful\n", RequestedAddress);

    

    PortNumber = SocketGetPortNumber(tcpTxRx);

    if (PortNumber < 0)

        Print("Error getting client port number. %ld\n", PortNumber);

        

    LocalStatus = SocketGetRemoteIPAddress(tcpTxRx, RemoteIPAddress);

    if (LocalStatus < 0)

        Print("Error getting remote ip address. %d\n", LocalStatus);

    Print("OnConnect: Connected to port %ld on address %s\n", 

                PortNumber, RemoteIPAddress);
               
               
}

          

/*SOCKETDISCONNECT tcpRx
{
 
socketConnected=0;       
        
}*/



/*SOCKETRECEIVE tcpTxRx
{
	STRING getEvent[2048];
	i=0;
	while(len(tcpTxRx.SocketRxBuf)>40)  
    	{
		getEvent=remove("</event>",tcpTxRx.SocketRxBuf);
		//print("getEvent is %s \n",getEvent);
		processXML(getEvent);
		//delay(delay1);
		//print("i is %d\n",i);
		}
clearbuffer(tcpTxRx.SocketRxBuf); 
}*/

SOCKETRECEIVE tcpTxRx
{
	STRING getXML[4096];
	STRING getEvent[2048];
	i=0;
	getXML = gather("</schedule>",tcpTxRx.SocketRxBuf);
	//print("xml_gathered length is %d\n",len(getXML)); 
	if (len(getXML) > 305)
		{ 
    		while (len(getXML) > 30)
			{
			getEvent = remove("</event>",getXML);
			//print("getEvent is %s \n",getEvent);
			call processXML(getEvent);
			print("xml_length is %d\n",len(getXML));
			}
		}
	clearbuffer(tcpTxRx.SocketRxBuf);
	clearbuffer(getXML); 
}

change time_o_day
{
	integer x;
	for (x = 0 to (i-1))
	{
		//print("hello ass, integer x is %d\n", x);
		if (time_o_day = currentClass[x].startTime)
		{
			currentTitle = currentClass[x].title;
			currentStartTime = currentClass[x].startTime;
			currentEndTime = currentClass[x].endTime;
			currentDescription = currentClass[x].description;
			currentDisplay = currentClass[x].display;
			currentCaptureTimes = currentClass[x].capturetimes;
		}
		else if(time_o_day = currentClass[x].endTime)
		{
			//delay(delay1);
			currentTitle = "No class right now";
			currentStartTime = "";
			currentEndTime = "";
			currentDescription = "";
			currentDisplay = "NO CLASS RIGHT NOW";
			currentCaptureTimes = "";
		}
		else if (x > 0)
		{
			if ((time_o_day = currentClass[x-1].endTime) && (time_o_day = currentClass[x].startTime))
			{
				currentTitle = currentClass[x].title;
				currentStartTime = currentClass[x].startTime;
				currentEndTime = currentClass[x].endTime;
				currentDescription = currentClass[x].description;
				currentDisplay = currentClass[x].display;
				currentCaptureTimes = currentClass[x].capturetimes;
			}
		}
			 
	}
}	
	    


/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

WaitForInitializationComplete();
i=0;
currentTitle = "";
currentStartTime = "";
currentEndTime = "";
currentDescription = "";
currentDisplay = "";
}


